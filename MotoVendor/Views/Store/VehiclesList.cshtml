@using BusinessLogic.DTO.VehicleOffer;
@using BusinessLogic.Decorators;
@using System.Reflection;
@model List<GetVehicleOfferDTO>;
@{
    ViewData["Title"] = "Store - Vehicles List";
}
@section Styles {
    <link rel="stylesheet" href="~/css/vehiclesList.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">

    <style>
        .filter {
            width: 400px;
            display: flex;
            flex-direction: column;
            gap: 20px;
            font-family: "Inter", sans-serif;
        }

        .filter input {
            font-family: "Inter", sans-serif;
            border: none;
            background-color: transparent;
        }

        .filter__search-component {
            display: flex;
            align-items: center;
            border: 1px solid black;
            border-radius: 5px;
            width: 100%;
        }

        .filter__search-input {
            border: none;
            outline: none;
            font-family: "Inter", sans-serif;
        }

            .filter__search-input::placeholder {
                color: black;
            }

        .filter__dropdown-base {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .filter__dropdown-base__left {
            display: flex;
            gap: 5px;
        }

        .filter__dropdown-base__left {
            display: flex;
            align-items: center;
        }

        .filter__dropdown-base__count-container {
            background-color: #0066FF;
            border-radius: 100%;
            width: 30px;
            aspect-ratio: 1/1;
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .filter__dropdown-base__count {
            color: white;
        }

        .filter__toggle-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #CCCCCC;
            border-radius: 5px;
            width: 80px;
        }

        .filter__toggle-btn__content {
            color: #7D7C83;
        }

        .filter__toggle-btn--on {
            border: none;
            background-color: #0066FF;
        }

        .filter__toggle-btn__content--on {
            color: white;
        }

        .filter__dropdown-collapsible__content {
            display: flex;
            width: 100%;
            padding-top: 10px;
        }

        .filter__slider-component {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .filter__slider-component__slider-wrapper {
            height: 20px;
            display: flex;
            align-items: center;
        }

        .filter__slider-component__slider {
            position: relative;
            width: 100%;
            background-color: #CCCCCC;
            height: 1px;
            content: "";
        }

        .filter__slider-component__slider-from,
        .filter__slider-component__slider-to {
            position: absolute;
            background-color: #0066FF;
            content: "";
            aspect-ratio: 1/1;
            width: 20px;
            border-radius: 100%;
            transform: translate(-50%, -50%);
        }

        .filter__slider-component__slider-filler {
            position: absolute;
            background-color: #0066FF;
            content: "";
            height: 1px;
        }

        .horizontal-line {
            content: "";
            height: 1px;
            background-color: #CCCCCC;
            display: block;
        }

        .filter__slider-component__values {
            display: flex;
            align-items: center;
            gap: 10px;
            justify-content: space-between;
        }

        .filter__slider-component__value-title {
            color: #7D7C83;
            font-weight: 300;
        }

        .filter__slider-component__value-from-container,
        .filter__slider-component__value-to-container {
            background-color: #F7F7F8;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
            padding: 8px;
            width: 150px;
            border-radius: 5px;
        }

        .filter__dropdown-base__title {
            font-weight: 400;
        }

        .filter__dropdown-collapsible__content--row {
            display: flex;
            flex-direction: row;
            gap: 10px;
        }

        .filter__slider-component__input-from,
        .filter__slider-component__input-to {
            width: 100%;
            text-align: right;
        }

        .filter__section {
            display: flex;
            gap: 20px;
        }

        .filter__sort-by {
            border: none;
            color: #0066FF;
            font-size: 16px;
        }
    </style>
    <style>
        .offer {
            font-family: "Inter", sans-serif;
            border-radius: 10px;
            border: 1px solid #CCCCCC;
            width: 400px;
        }

        .offer__photo-main {
            width: 100%;
        }

            .offer__photo-main img {
                width: 100%;
                aspect-ratio: 16/9;
            }

        .offer__upper {
            margin: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .offer__bottom {
            padding: 15px;
        }

        .offer__location-owner {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .offer__location {
            display: flex;
            align-items: center;
        }

        .offer__owner {
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .offer__brand {
            margin-bottom: 5px;
            font-weight: 500;
            color: #7D7C83;
        }

        .offer__model {
            font-size: 16px;
            font-weight: 700;
        }

        .offer__model-price {
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
        }

        .offer__price {
            display: flex;
            align-items: last baseline;
            font-weight: 500;
        }

        .offer__price-tag {
            font-size: 10px;
            font-weight: 500;
        }

        .hr-line {
            width: 100%;
            border-color: #CCCCCC;
            border-bottom: none;
            border-left: none;
            border-right: none;
        }

        .offer__reservation-status {
            width: 127px;
            height: 27px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #20DA32;
            border-radius: 7px;
            background-color: #b4F8b2;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const dropDownComponents = document.querySelectorAll('.filter__dropdown-component');
            dropDownComponents.forEach(dropDownComponent => {
                const dropDownCollapsible = dropDownComponent.querySelector('.filter__dropdown-collapsible');
                dropDownCollapsible.style.display = 'none';

                const dropDownBase = dropDownComponent.querySelector('.filter__dropdown-base');
                const dropDownArrow = dropDownComponent.querySelector('.filter__dropdown-arrow');
                dropDownBase.addEventListener('click', () => {
                    if(dropDownCollapsible.style.display === 'none') {
                        dropDownCollapsible.style.display = 'block';
                        dropDownArrow.style.transform = 'rotate(180deg)';
                    }
                    else {
                        dropDownCollapsible.style.display = 'none';
                        dropDownArrow.style.transform = 'rotate(0deg)';
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const sliderComponents = document.querySelectorAll('.filter__slider-component');
            sliderComponents.forEach(sliderComponent => {
                const sliderFrom = sliderComponent.querySelector('.filter__slider-component__slider-from');
                const sliderTo = sliderComponent.querySelector('.filter__slider-component__slider-to');
                const sliderFiller = sliderComponent.querySelector('.filter__slider-component__slider-filler');

                const inputFrom = sliderComponent.querySelector('.filter__slider-component__input-from');
                const inputTo = sliderComponent.querySelector('.filter__slider-component__input-to');

                let isDraggingFrom = false;
                let isDraggingTo = false;

                function updateSliderFromSliders() {
                    const left = parseFloat(sliderFrom.style.left || '0%');
                    const right = parseFloat(sliderTo.style.left || '100%');

                    const fillerLeft = left;
                    const fillerRight = 100 - right;

                    sliderFiller.style.left = `${fillerLeft}%`;
                    sliderFiller.style.right = `${fillerRight}%`;

                    const fromBase = sliderFrom.getAttribute('basefrom');
                    const toBase = sliderTo.getAttribute('baseto');

                    const newValueFrom = Math.round(fromBase + (toBase - fromBase) * left / 100);
                    const newValueTo = Math.round(fromBase + (toBase - fromBase) * right / 100);

                    inputFrom.value = newValueFrom;
                    inputTo.value = newValueTo;
                }

                function updateSliderFromInputs() {
                    const leftValue = parseFloat(inputFrom.value);
                    const rightValue = parseFloat(inputTo.value);

                    const fromBase = sliderFrom.getAttribute('basefrom');
                    const toBase = sliderTo.getAttribute('baseto');

                    const left = (leftValue - fromBase) / (toBase - fromBase) * 100;
                    const right = (rightValue - fromBase) / (toBase - fromBase) * 100;

                    if (left <= right) {
                        sliderFrom.style.left = `${left}%`;
                    }

                    if (right >= left) {
                        sliderTo.style.left = `${right}%`;
                    }

                    updateSliderFromSliders();
                }

                sliderFrom.addEventListener('mousedown', function (event) {
                    isDraggingFrom = true;
                    document.addEventListener('mousemove', onMouseMoveFrom);
                    document.addEventListener('mouseup', onMouseUpFrom);
                });

                sliderTo.addEventListener('mousedown', function (event) {
                    isDraggingTo = true;
                    document.addEventListener('mousemove', onMouseMoveTo);
                    document.addEventListener('mouseup', onMouseUpTo);
                });

                function onMouseMoveFrom(event) {
                    if (isDraggingFrom) {
                        handleMouseMove(event, true);
                    }
                }

                function onMouseMoveTo(event) {
                    if (isDraggingTo) {
                        handleMouseMove(event, false);
                    }
                }

                function onMouseUpFrom() {
                    isDraggingFrom = false;
                    document.removeEventListener('mousemove', onMouseMoveFrom);
                    document.removeEventListener('mouseup', onMouseUpFrom);
                }

                function onMouseUpTo() {
                    isDraggingTo = false;
                    document.removeEventListener('mousemove', onMouseMoveTo);
                    document.removeEventListener('mouseup', onMouseUpTo);
                }

                function handleMouseMove(event, isFrom) {
                    let sliderWidth = document.querySelector('.filter__slider-component__slider').offsetWidth;
                    const offsetX = event.clientX - document.querySelector('.filter__slider-component__slider').getBoundingClientRect().left;
                    const percentage = Math.min(Math.max(0, offsetX / sliderWidth * 100), 100);

                    if (isFrom) {
                        if (percentage < parseFloat(sliderTo.style.left || '100%')) {
                            sliderFrom.style.left = `${percentage}%`;
                        }
                    } else {
                        if (percentage > parseFloat(sliderFrom.style.left || '0%')) {
                            sliderTo.style.left = `${percentage}%`;
                        }
                    }

                    updateSliderFromSliders();
                }

                inputFrom.addEventListener('keydown', (event) => {
                    if (event.key === 'Enter')
                        updateSliderFromInputs();
                });
                inputTo.addEventListener('keydown', (event) => {
                    if (event.key === 'Enter')
                        updateSliderFromInputs();
                });

                updateSliderFromInputs();
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const customCheckBoxes = document.querySelectorAll('.filter__toggle-btn');

            function update(customCheckBox) {
                const customCheckBoxContent = customCheckBox.querySelector('.filter__toggle-btn__content');
                const customCheckBoxInput = customCheckBox.querySelector('.filter__toggle-btn__input');

                if (customCheckBoxInput.checked) {
                    customCheckBox.classList.add('filter__toggle-btn--on');
                    customCheckBoxContent.classList.add('filter__toggle-btn__content--on');
                } else {
                    customCheckBox.classList.remove('filter__toggle-btn--on');
                    customCheckBoxContent.classList.remove('filter__toggle-btn__content--on');
                }
            }

            customCheckBoxes.forEach(customCheckBox => update(customCheckBox));

            customCheckBoxes.forEach(customCheckBox => {
                customCheckBox.addEventListener('click', () => {
                    const customCheckBoxInput = customCheckBox.querySelector('.filter__toggle-btn__input');
                    customCheckBoxInput.checked = !customCheckBoxInput.checked;
                    update(customCheckBox);
                });
            });
        });
    </script>
}

<div class="main">
    <div class="title">
        Listings of your search
    </div>
    <div class="content">
        <form class="filter" method="get">
            <div class="filter__search-component">
                <img class="filter__search-icon" src="~/images/search.svg" />
                <input class="filter__search-input" placeholder="Search" />
            </div>
            @foreach (var property in typeof(GetVehicleOfferDTO).GetProperties())
            {
                var isFilterable = property.GetCustomAttribute<FilterableAttribute>() != null;
                if (!isFilterable) continue;
                if(property.PropertyType == typeof(string))
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__title">
                                @property.Name
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content">
                                <div class="filter__search-component">
                                    <img class="filter__search-icon" src="~/images/search.svg" />
                                    <input type="text"
                                           name="@property.Name"
                                           class="filter__search-input"
                                           placeholder="Search"
                                           value="@(ViewBag.FilterValues?.ContainsKey(property.Name) == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name]).FirstOrDefault()
                                                  : string.Empty)" />
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if(property.PropertyType.IsEnum)
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__left">
                                <div class="filter__dropdown-base__title">
                                    @property.Name
                                </div>
                                <div class="filter__dropdown-base__count-container">
                                    <div class="filter__dropdown-base__count">
                                        3
                                    </div>
                                </div>
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content filter__dropdown-collapsible__content--row">
                                @foreach (var value in Enum.GetValues(property.PropertyType))
                                {
                                    var isChecked = ViewBag.FilterValues != null
                                                    && ViewBag.FilterValues.ContainsKey(property.Name)
                                                    && ((HashSet<string>)ViewBag.FilterValues[property.Name]).Contains(value.ToString());
                                    <div class="filter__toggle-btn">
                                        <div class="filter__toggle-btn__content">
                                            @value
                                        </div>
                                        <input class="filter__toggle-btn__input"
                                               style="display: none;"
                                               type="checkbox"
                                               name="@property.Name"
                                               value="@value"
                                               @(isChecked ? "checked" : "") />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else if(property.PropertyType == typeof(int))
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__left">
                                <div class="filter__dropdown-base__title">
                                    @property.Name
                                </div>
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content">
                                <div class="filter__slider-component">
                                    <div class="filter__slider-component__slider-wrapper">
                                        <div class="filter__slider-component__slider">
                                            <div basefrom="0" class="filter__slider-component__slider-from"></div>
                                            <div class="filter__slider-component__slider-filler"></div>
                                            <div baseto="1000000" class="filter__slider-component__slider-to"></div>
                                        </div>
                                    </div>
                                    <div class="filter__slider-component__values">
                                        <div class="filter__slider-component__value-from-container">
                                            <div class="filter__slider-component__value-title">
                                                From
                                            </div>
                                            <input class="filter__slider-component__input-from" type="number" name="@(property.Name)[gte]"
                                                   value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[gte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[gte]"]).FirstOrDefault()
                                                  : "0")" />
                                        </div>
                                        <div class="filter__slider-component__value-to-container">
                                            <div class="filter__slider-component__value-title">
                                                To
                                            </div>
                                            <input class="filter__slider-component__input-to" type="number" name="@(property.Name)[lte]"
                                                   value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[lte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[lte]"]).FirstOrDefault()
                                                  : "1000000")" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if(property.PropertyType == typeof(DateTime))
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__left">
                                <div class="filter__dropdown-base__title">
                                    @property.Name
                                </div>
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content">
                                <input value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[gte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[gte]"]).FirstOrDefault()
                                                  : string.Empty)" 
                                       type="datetime-local" 
                                       name="@(property.Name)[gte]" />
                                <input value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[lte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[lte]"]).FirstOrDefault()
                                                  : string.Empty)" 
                                       type="datetime-local" 
                                       name="@(property.Name)[lte]" />
                            </div>
                        </div>
                    </div>
                }
                <div class="horizontal-line"></div>
            }
            <div class="filter__section">
                <div>Sort by:</div>
                <select name="sort_by" class="filter__sort-by">
                    @foreach (var property in typeof(GetVehicleOfferDTO).GetProperties())
                    {
                        var isSortable = property.GetCustomAttribute<FilterableAttribute>() != null;
                        if (!isSortable) continue;
                        <option value="@(property.Name)[asc]">@(property.Name) (Asc)</option>
                        <option value="@(property.Name)[desc]">@(property.Name) (Desc)</option>
                    }
                </select>
            </div>
            <div class="horizontal-line"></div>
            <button type="submit">Filter</button>
        </form>
        <div class="results">
            <div class="results-global">
                <div class="results-count">
                    Showing 1-30 of 90 Listings
                </div>
            </div>
            <div class="results-main">
                @foreach (var vehicleOffer in Model)
                {
                    <div class="offer">
                        <div class="offer__upper">
                            <div class="offer__reservation-status">
                                Not reserved
                            </div>
                            <div class="offer__observation-status">
                                <img src="~/images/pin.svg" alt="pin offer" />
                            </div>
                        </div>
                        <div class="offer__photo-main">
                            <img src="data:image/@vehicleOffer.Images[0].Extension;base64,@vehicleOffer.Images[0].Base64" alt="fetch failed" />
                        </div>
                        <div class="offer__bottom">
                            <div class="offer__brand">
                                @vehicleOffer.Brand
                            </div>
                            <div class="offer__model-price">
                                <div class="offer__model">
                                    @vehicleOffer.Model @vehicleOffer.Version
                                </div>
                                <div class="offer__price">
                                    @vehicleOffer.Price PLN
                                    <div class="offer__price-tag">
                                        Brutto
                                    </div>
                                </div>
                            </div>
                            <hr class="hr-line" />
                            <div class="offer__location-owner">
                                <div class="offer__location">
                                    <img src="~/images/location.svg" alt="fetch failed" />
                                    @vehicleOffer.Location
                                </div>
                                <div class="offer__owner">
                                    @@Heniek144
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
