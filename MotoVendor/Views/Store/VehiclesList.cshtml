@inject BusinessLogic.Services.Interfaces.IUserService userService;
@inject BusinessLogic.Services.Interfaces.IVehicleOfferObservationService offerObservationService;
@using BusinessLogic.DTO.VehicleOffer;
@using BusinessLogic.Decorators;
@using System.Reflection;
@model List<GetVehicleOfferDTO>;
@{
    ViewData["Title"] = "Store - Vehicles List";
    var user = userService.GetCurrentUser().Result;
}
@section Styles {
    <link rel="stylesheet" href="~/css/vehiclesList.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">

    <style>
        p {
            margin: 0px;
        }
        .filter {
            width: 400px;
            display: flex;
            flex-direction: column;
            gap: 20px;
            font-family: "Inter", sans-serif;
        }

        .filter input {
            font-family: "Inter", sans-serif;
            border: none;
            background-color: transparent;
        }

        .filter__search-component {
            display: flex;
            align-items: center;
            border: 1px solid black;
            border-radius: 5px;
            width: 100%;
        }

        .filter__search-input {
            border: none;
            outline: none;
            font-family: "Inter", sans-serif;
        }

            .filter__search-input::placeholder {
                color: black;
            }

        .filter__dropdown-base {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .filter__dropdown-base__left {
            display: flex;
            gap: 5px;
        }

        .filter__dropdown-base__left {
            display: flex;
            align-items: center;
        }

        .filter__dropdown-base__count-container {
            background-color: #0066FF;
            border-radius: 100%;
            width: 30px;
            aspect-ratio: 1/1;
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .filter__dropdown-base__count {
            color: white;
        }

        .filter__toggle-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #CCCCCC;
            border-radius: 5px;
            width: 80px;
        }

        .filter__toggle-btn__content {
            color: #7D7C83;
        }

        .filter__toggle-btn--on {
            border: none;
            background-color: #0066FF;
        }

        .filter__toggle-btn__content--on {
            color: white;
        }

        .filter__dropdown-collapsible__content {
            display: flex;
            width: 100%;
            padding-top: 10px;
        }

        .filter__slider-component {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .filter__slider-component__slider-wrapper {
            height: 20px;
            display: flex;
            align-items: center;
            padding: 0px 10px;
        }

        .filter__slider-component__slider {
            position: relative;
            width: 100%;
            background-color: #CCCCCC;
            height: 1px;
            content: "";
        }

        .filter__slider-component__slider-from,
        .filter__slider-component__slider-to {
            position: absolute;
            background-color: #0066FF;
            content: "";
            aspect-ratio: 1/1;
            width: 20px;
            border-radius: 100%;
            transform: translate(-50%, -50%);
        }

        .filter__slider-component__slider-filler {
            position: absolute;
            background-color: #0066FF;
            content: "";
            height: 1px;
        }

        .horizontal-line {
            content: "";
            height: 1px;
            background-color: #CCCCCC;
            display: block;
        }

        .filter__slider-component__values {
            display: flex;
            align-items: center;
            gap: 10px;
            justify-content: space-between;
        }

        .filter__slider-component__value-title {
            color: #7D7C83;
            font-weight: 300;
        }

        .filter__slider-component__value-from-container,
        .filter__slider-component__value-to-container {
            background-color: #F7F7F8;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
            padding: 8px;
            width: 150px;
            border-radius: 5px;
        }

        .filter__dropdown-base__title {
            font-weight: 500;
        }

        .filter__dropdown-collapsible__content--row {
            display: flex;
            flex-direction: row;
            gap: 10px;
        }

        .filter__slider-component__input-from,
        .filter__slider-component__input-to {
            width: 100%;
            text-align: right;
        }

        .filter__section {
            display: flex;
            gap: 20px;
        }

        .filter__sort-by {
            border: none;
            color: #0066FF;
            font-size: 16px;
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            -webkit-appearance: none;
        }

        .filter__submit-btn {
            aspect-ratio: 7/1;
            color: black;
            font-size: 16px;
            border-radius: 5px;
            border: 1px solid #CCCCCC;
            font-weight: 700;
            margin-top: 20px;
        }
    </style>
    <style>
        .offer {
            font-family: "Inter", sans-serif;
            border-radius: 10px;
            border: 1px solid #CCCCCC;
            width: 400px;
        }

        .offer__photo-main {
            width: 100%;
        }

            .offer__photo-main img {
                width: 100%;
                aspect-ratio: 16/9;
            }

        .offer__upper {
            margin: 10px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .offer__bottom {
            padding: 15px;
        }

        .offer__location-owner {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .offer__location {
            display: flex;
            align-items: center;
        }

        .offer__owner {
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .offer__brand {
            margin-bottom: 5px;
            font-weight: 500;
            color: #7D7C83;
        }

        .offer__model {
            font-size: 16px;
            font-weight: 700;
        }

        .offer__model-price {
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
        }

        .offer__price {
            display: flex;
            align-items: last baseline;
            font-weight: 500;
        }

        .offer__price-tag {
            font-size: 10px;
            font-weight: 500;
            padding-left: 5px;
        }

        .hr-line {
            width: 100%;
            border-color: #CCCCCC;
            border-bottom: none;
            border-left: none;
            border-right: none;
        }

        .offer__reservation-status {
            width: 127px;
            height: 27px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #20DA32;
            border-radius: 7px;
            background-color: #b4F8b2;
            font-size: 16px;
            font-family: 'Inter', sans-serif;
        }

        .offer__reservation-status--reserved {
            background-color: red;
            color: white;
        }
        .aside-sorter {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .offer__actions-section {
            display: flex;
        }

        .offer__observation-status--observing {
            filter: invert(40%) sepia(100%) saturate(1500%) hue-rotate(311deg);
        }
    </style>
    <style>
        .checkbox-container {
            width: 80px;
            height: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: white;
            color: #7D7C83;
            cursor: pointer;
            user-select: none;
            border-radius: 5px;
            transition: background-color 0.3s;
            border: 1px solid #CCCCCC;
        }

        .checkbox-container[data-state="true"] {
            background-color: green;
            color: white;
        }

        .checkbox-container[data-state="false"] {
            background-color: rgb(255, 0, 0);
            color: rgb(255, 255, 255);
        }

        .hidden-input {
            display: none;
        }
      </style>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const dropDownComponents = document.querySelectorAll('.filter__dropdown-component');
            dropDownComponents.forEach(dropDownComponent => {
                const dropDownCollapsible = dropDownComponent.querySelector('.filter__dropdown-collapsible');
                dropDownCollapsible.style.display = 'none';

                const dropDownBase = dropDownComponent.querySelector('.filter__dropdown-base');
                const dropDownArrow = dropDownComponent.querySelector('.filter__dropdown-arrow');
                dropDownBase.addEventListener('click', () => {
                    if(dropDownCollapsible.style.display === 'none') {
                        dropDownCollapsible.style.display = 'block';
                        dropDownArrow.style.transform = 'rotate(180deg)';
                    }
                    else {
                        dropDownCollapsible.style.display = 'none';
                        dropDownArrow.style.transform = 'rotate(0deg)';
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const sliderComponents = document.querySelectorAll('.filter__slider-component');
            sliderComponents.forEach(sliderComponent => {
                const sliderFrom = sliderComponent.querySelector('.filter__slider-component__slider-from');
                const sliderTo = sliderComponent.querySelector('.filter__slider-component__slider-to');
                const sliderFiller = sliderComponent.querySelector('.filter__slider-component__slider-filler');

                const inputFrom = sliderComponent.querySelector('.filter__slider-component__input-from');
                const inputTo = sliderComponent.querySelector('.filter__slider-component__input-to');

                let isDraggingFrom = false;
                let isDraggingTo = false;

                function updateSliderFromSliders() {
                    const left = parseFloat(sliderFrom.style.left || '0%');
                    const right = parseFloat(sliderTo.style.left || '100%');

                    const fillerLeft = left;
                    const fillerRight = 100 - right;

                    sliderFiller.style.left = `${fillerLeft}%`;
                    sliderFiller.style.right = `${fillerRight}%`;

                    const fromBase = sliderFrom.getAttribute('basefrom');
                    const toBase = sliderTo.getAttribute('baseto');

                    const newValueFrom = Math.round(fromBase + (toBase - fromBase) * left / 100);
                    const newValueTo = Math.round(fromBase + (toBase - fromBase) * right / 100);

                    inputFrom.value = newValueFrom;
                    inputTo.value = newValueTo;
                }

                function updateSliderFromInputs() {
                    const leftValue = parseFloat(inputFrom.value);
                    const rightValue = parseFloat(inputTo.value);

                    const fromBase = sliderFrom.getAttribute('basefrom');
                    const toBase = sliderTo.getAttribute('baseto');

                    const left = (leftValue - fromBase) / (toBase - fromBase) * 100;
                    const right = (rightValue - fromBase) / (toBase - fromBase) * 100;

                    if (left <= right) {
                        sliderFrom.style.left = `${left}%`;
                    }

                    if (right >= left) {
                        sliderTo.style.left = `${right}%`;
                    }

                    updateSliderFromSliders();
                }

                sliderFrom.addEventListener('mousedown', function (event) {
                    isDraggingFrom = true;
                    document.addEventListener('mousemove', onMouseMoveFrom);
                    document.addEventListener('mouseup', onMouseUpFrom);
                });

                sliderTo.addEventListener('mousedown', function (event) {
                    isDraggingTo = true;
                    document.addEventListener('mousemove', onMouseMoveTo);
                    document.addEventListener('mouseup', onMouseUpTo);
                });

                function onMouseMoveFrom(event) {
                    if (isDraggingFrom) {
                        handleMouseMove(event, true);
                    }
                }

                function onMouseMoveTo(event) {
                    if (isDraggingTo) {
                        handleMouseMove(event, false);
                    }
                }

                function onMouseUpFrom() {
                    isDraggingFrom = false;
                    document.removeEventListener('mousemove', onMouseMoveFrom);
                    document.removeEventListener('mouseup', onMouseUpFrom);
                }

                function onMouseUpTo() {
                    isDraggingTo = false;
                    document.removeEventListener('mousemove', onMouseMoveTo);
                    document.removeEventListener('mouseup', onMouseUpTo);
                }

                function handleMouseMove(event, isFrom) {
                    let sliderWidth = document.querySelector('.filter__slider-component__slider').offsetWidth;
                    const offsetX = event.clientX - document.querySelector('.filter__slider-component__slider').getBoundingClientRect().left;
                    const percentage = Math.min(Math.max(0, offsetX / sliderWidth * 100), 100);

                    if (isFrom) {
                        if (percentage < parseFloat(sliderTo.style.left || '100%')) {
                            sliderFrom.style.left = `${percentage}%`;
                        }
                    } else {
                        if (percentage > parseFloat(sliderFrom.style.left || '0%')) {
                            sliderTo.style.left = `${percentage}%`;
                        }
                    }

                    updateSliderFromSliders();
                }

                inputFrom.addEventListener('keydown', (event) => {
                    if (event.key === 'Enter')
                        updateSliderFromInputs();
                });
                inputTo.addEventListener('keydown', (event) => {
                    if (event.key === 'Enter')
                        updateSliderFromInputs();
                });

                updateSliderFromInputs();
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const containersWithCheckboxes = document.querySelectorAll('.checkboxes');
            containersWithCheckboxes.forEach(containerWithCheckboxes => {
                const checkBoxesCountElement = containerWithCheckboxes.querySelector('.checkboxesCount');
                const checkBoxesCountContainer = containerWithCheckboxes.querySelector('.checkboxesCountContainer');
                const customCheckBoxes = containerWithCheckboxes.querySelectorAll('.filter__toggle-btn');
                function countCheckedCheckboxes() {
                    let checkedCheckboxesCount = 0;
                    customCheckBoxes.forEach(customCheckBox => {
                        const customCheckBoxInput = customCheckBox.querySelector('.filter__toggle-btn__input');
                        if (customCheckBoxInput.checked)
                            checkedCheckboxesCount++;
                    });
                    return checkedCheckboxesCount;
                }
                function UpdateCheckBoxCountState(count) {
                    if (count == 0) {
                        checkBoxesCountContainer.style.display = 'none';
                    }
                    else {
                        checkBoxesCountContainer.style.display = 'flex';
                    }
                    checkBoxesCountElement.textContent = count;
                }
                customCheckBoxes.forEach(customCheckBox => {
                    const customCheckBoxContent = customCheckBox.querySelector('.filter__toggle-btn__content');
                    const customCheckBoxInput = customCheckBox.querySelector('.filter__toggle-btn__input');
                    if (customCheckBoxInput.checked) {
                        customCheckBox.classList.add('filter__toggle-btn--on');
                        customCheckBoxContent.classList.add('filter__toggle-btn__content--on');
                    }
                    else {
                        customCheckBox.classList.remove('filter__toggle-btn--on');
                        customCheckBoxContent.classList.remove('filter__toggle-btn__content--on');
                    }
                    customCheckBox.addEventListener('click', () => {
                        if (customCheckBoxInput.checked) {
                            customCheckBox.classList.remove('filter__toggle-btn--on');
                            customCheckBoxContent.classList.remove('filter__toggle-btn__content--on');
                            customCheckBoxInput.checked = false;
                        }
                        else {
                            customCheckBox.classList.add('filter__toggle-btn--on');
                            customCheckBoxContent.classList.add('filter__toggle-btn__content--on');
                            customCheckBoxInput.checked = true;
                        }
                        UpdateCheckBoxCountState(countCheckedCheckboxes());
                    });
                });
                UpdateCheckBoxCountState(countCheckedCheckboxes());
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const sorter = document.querySelector('.filter__sort-by');
            sorter.addEventListener('change', () => {
                document.querySelector('#data-manipulation-form').submit();
            });
        });
    </script>
    <script>
        async function addOfferObservation(object) {
            const response = await fetch('/api/offers/observations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(object)
            });

            if (response.ok) {
                return await response.text();
            }
            throw new Error('Failed to add observation');
        }

        async function deleteOfferObservation(id) {
            const response = await fetch(`/api/offers/observations/${id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                return await response.text();
            }
            throw new Error('Failed to delete observation');
        }

        document.addEventListener("DOMContentLoaded", () => {
            const offerObservations = document.querySelectorAll('.offer__observation-status');

            offerObservations.forEach(observation => {
                let observationId = observation.getAttribute('observation-id');
                if (observationId) {
                    observation.classList.add('offer__observation-status--observing');
                }
                const userId = observation.getAttribute('user-id');
                const offerId = observation.getAttribute('offer-id');

                observation.addEventListener('click', async () => {
                    try {
                        if (observationId == null) {

                            const postJson = {
                                "UserId": userId,
                                "OfferId": offerId
                            }

                            const newObservationId = await addOfferObservation(postJson);
                            observationId = newObservationId;
                            observation.setAttribute('observation-id', newObservationId);
                            observation.classList.add('offer__observation-status--observing');
                        } else {
                            await deleteOfferObservation(observationId);
                            observation.removeAttribute('observation-id');
                            observationId = null;
                            observation.classList.remove('offer__observation-status--observing');
                        }
                    } catch (error) {
                        console.error(error.message);
                    }
                });
            });
        });
    </script>
    <script>
        function toggleState(container) {
            const currentState = container.getAttribute('data-state');
            let newState;
            const hiddenInput = container.querySelector('.hidden-input');

            switch (currentState) {
                case 'disabled':
                    newState = 'true';
                    hiddenInput.disabled = false;
                    hiddenInput.value = 'true';
                    break;
                case 'true':
                    newState = 'false';
                    hiddenInput.disabled = false;
                    hiddenInput.value = 'false';
                    break;
                case 'false':
                    newState = 'disabled';
                    hiddenInput.disabled = true;
                    break;
                default:
                    newState = 'disabled';
            }

            container.setAttribute('data-state', newState);
        }
        document.addEventListener('DOMContentLoaded', function () {
            const checkboxContainer = document.querySelector('.checkbox-container');
            const currentState = checkboxContainer.getAttribute('data-state');
            const hiddenInput = checkboxContainer.querySelector('.hidden-input');
            hiddenInput.checked = true

            if (currentState === 'true') {
                hiddenInput.disabled = false;
                hiddenInput.value = 'true';
            } else if (currentState === 'false') {
                hiddenInput.disabled = false;
                hiddenInput.value = 'false';
            } else {
                hiddenInput.disabled = true;
                hiddenInput.value = 'false';
            }
        });
    </script>
    <script>
        const reservations = document.querySelectorAll('.offer__reservation-status');
        reservations.forEach(reservation => {
            const reservedAttribute = reservation.getAttribute('reserved');
            let isReserved = reservedAttribute !== null;
            updateVisuals(reservation, isReserved);
        });
        function changeReservation(element, id) {
            const reservedAttribute = element.getAttribute('reserved');
            let isReserved = reservedAttribute !== null;

            toggleReservationState(id, isReserved);

            async function changeReservationFetch(id, object) {
                const response = await fetch(`/api/offers/${id}/isreserved`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(object)
                });

                if (response.ok) {
                    return response.text();
                }
                throw new Error("Changing reservation failed");
            }
            async function toggleReservationState(id, isReserved) {
                isReserved = !isReserved;

                const fetchBody = { isReserved: isReserved };

                try {
                    await changeReservationFetch(id, fetchBody);
                    updateElementState(element, isReserved);
                    updateVisuals(element, isReserved);
                } catch (error) {
                    console.error(error.message);
                    alert("Failed to update reservation status.");
                }
            }

            function updateElementState(element, isReserved) {
                if (isReserved) {
                    element.setAttribute('reserved', '');
                } else {
                    element.removeAttribute('reserved');
                }
            }
        }
        function updateVisuals(element, isReserved) {
            if (isReserved) {
                element.textContent = 'Reserved';
                element.classList.add('offer__reservation-status--reserved');
            } else {
                element.textContent = 'Not reserved';
                element.classList.remove('offer__reservation-status--reserved');
            }
        }
    </script>
}

<div class="main">
    <div class="title">
        Listings of your search
    </div>
    <form class="content" id="data-manipulation-form">
        <div class="filter" method="get">
            <div class="horizontal-line"></div>
            @foreach (var property in typeof(GetVehicleOfferDTO).GetProperties())
            {
                var isFilterable = property.GetCustomAttribute<FilterableAttribute>() != null;
                if (!isFilterable) continue;
                if(property.PropertyType == typeof(string))
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__title">
                                @property.Name
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content">
                                <div class="filter__search-component">
                                    <img class="filter__search-icon" src="~/images/search.svg" />
                                    <input type="text"
                                           name="@property.Name"
                                           class="filter__search-input"
                                           placeholder="Search"
                                           value="@(ViewBag.FilterValues?.ContainsKey(property.Name) == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name]).FirstOrDefault()
                                                  : string.Empty)" />
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if(property.PropertyType.IsEnum)
                {
                    <div class="filter__dropdown-component checkboxes">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__left">
                                <div class="filter__dropdown-base__title">
                                    @property.Name
                                </div>
                                <div class="filter__dropdown-base__count-container checkboxesCountContainer">
                                    <div class="filter__dropdown-base__count checkboxesCount">
                                        0
                                    </div>
                                </div>
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content filter__dropdown-collapsible__content--row">
                                @foreach (var value in Enum.GetValues(property.PropertyType))
                                {
                                    var isChecked = ViewBag.FilterValues != null
                                                    && ViewBag.FilterValues.ContainsKey(property.Name)
                                                    && ((HashSet<string>)ViewBag.FilterValues[property.Name]).Contains(value.ToString());
                                    <div class="filter__toggle-btn">
                                        <div class="filter__toggle-btn__content">
                                            @value
                                        </div>
                                        <input class="filter__toggle-btn__input"
                                               style="display: none;"
                                               type="checkbox"
                                               name="@property.Name"
                                               value="@value"
                                               @(isChecked ? "checked" : "") />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else if(property.PropertyType == typeof(int))
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__left">
                                <div class="filter__dropdown-base__title">
                                    @property.Name
                                </div>
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content">
                                <div class="filter__slider-component">
                                    <div class="filter__slider-component__slider-wrapper">
                                        <div class="filter__slider-component__slider">
                                            <div basefrom="0" class="filter__slider-component__slider-from"></div>
                                            <div class="filter__slider-component__slider-filler"></div>
                                            <div baseto="1000000" class="filter__slider-component__slider-to"></div>
                                        </div>
                                    </div>
                                    <div class="filter__slider-component__values">
                                        <div class="filter__slider-component__value-from-container">
                                            <div class="filter__slider-component__value-title">
                                                From
                                            </div>
                                            <input class="filter__slider-component__input-from" type="number" name="@(property.Name)[gte]"
                                                   value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[gte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[gte]"]).FirstOrDefault()
                                                  : "0")" />
                                        </div>
                                        <div class="filter__slider-component__value-to-container">
                                            <div class="filter__slider-component__value-title">
                                                To
                                            </div>
                                            <input class="filter__slider-component__input-to" type="number" name="@(property.Name)[lte]"
                                                   value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[lte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[lte]"]).FirstOrDefault()
                                                  : "1000000")" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if(property.PropertyType == typeof(DateTime))
                {
                    <div class="filter__dropdown-component">
                        <div class="filter__dropdown-base">
                            <div class="filter__dropdown-base__left">
                                <div class="filter__dropdown-base__title">
                                    @property.Name
                                </div>
                            </div>
                            <div class="filter__dropdown-base__right">
                                <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                            </div>
                        </div>
                        <div class="filter__dropdown-collapsible">
                            <div class="filter__dropdown-collapsible__content">
                                <input value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[gte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[gte]"]).FirstOrDefault()
                                                  : string.Empty)" 
                                       type="datetime-local" 
                                       name="@(property.Name)[gte]" />
                                <input value="@(ViewBag.FilterValues?.ContainsKey(property.Name + "[lte]") == true
                                                  ? ((HashSet<string>)ViewBag.FilterValues[property.Name + "[lte]"]).FirstOrDefault()
                                                  : string.Empty)" 
                                       type="datetime-local" 
                                       name="@(property.Name)[lte]" />
                            </div>
                        </div>
                    </div>
                }
                <div class="horizontal-line"></div>
            }
            <div class="filter__dropdown-component">
                <div class="filter__dropdown-base">
                    <div class="filter__dropdown-base__left">
                        <div class="filter__dropdown-base__title">
                            Owner Filter
                        </div>
                    </div>
                    <div class="filter__dropdown-base__right">
                        <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                    </div>
                </div>
                <div class="filter__dropdown-collapsible">
                    <div class="filter__dropdown-collapsible__content">
                        <div class="checkbox-container"
                             data-state=@((ViewBag.IsOwner == null) ? "disabled" : (ViewBag.IsOwner == "true" ? "true" : "false"))
                             onclick="toggleState(this)">
                            <input type="checkbox" class="hidden-input" name="IsOwner">
                            IsOwner
                        </div>
                    </div>
                </div>
            </div>
            <div class="horizontal-line"></div>
            <div class="filter__dropdown-component checkboxes">
                <div class="filter__dropdown-base">
                    <div class="filter__dropdown-base__left">
                        <div class="filter__dropdown-base__title">
                            Is Observing
                        </div>
                    </div>
                    <div class="filter__dropdown-base__right">
                        <img class="filter__dropdown-arrow" src="~/images/triangle-arrow.svg" />
                    </div>
                </div>
                <div class="filter__dropdown-collapsible">
                    @{
                        var isObservingChecked = ViewBag.IsObserving == "true";
                    }
                    <div class="filter__dropdown-collapsible__content filter__dropdown-collapsible__content--row">
                        <div class="filter__toggle-btn @(isObservingChecked ? "filter__toggle-btn--on" : "")">
                            <div class="filter__toggle-btn__content" @(isObservingChecked ? "filter__toggle-btn__content--on" : "")>
                                Check
                            </div>
                            <input class="filter__toggle-btn__input"
                                   style="display: none;"
                                   type="checkbox"
                                   name="isObserving"
                                   value="true"
                            @(isObservingChecked ? "checked" : "") />
                        </div>
                    </div>
                </div>
            </div>
            <button type="submit" class="filter__submit-btn">Filter</button>
        </div>
        <div class="results">
            <div class="results-global">
                <div class="results-count">
                    @if (Model.Count == 0)
                    {
                        <p>Showing None of @ViewBag.TotalItemsCount Listings</p>
                    }
                    else
                    {
                        <p>
                            Showing @(ViewBag.PageIndex * ViewBag.PageSize + 1) - @(ViewBag.PageIndex * ViewBag.PageSize + Model.Count)
                            of @ViewBag.TotalItemsCount Listings
                        </p>
                    }
                </div>
                <div class="result-global__right-side">
                    <div class="aside-sorter">
                        <div>Sort by:</div>
                        <select name="sort_by" class="filter__sort-by">
                            @foreach (var property in typeof(GetVehicleOfferDTO).GetProperties())
                            {
                                var isSortable = property.GetCustomAttribute<FilterableAttribute>() != null;
                                if (!isSortable) continue;
                                <!option value="@(property.Name + "[asc]")"
                                @(ViewBag.SortBy == (property.Name + "[asc]") ? "selected" : "")>
                                    @(property.Name) (Asc)
                                </!option>
                                <!option value="@(property.Name + "[desc]")"
                                @(ViewBag.SortBy == (property.Name + "[desc]") ? "selected" : "")>
                                    @(property.Name) (Desc)
                                </!option>
                            }
                        </select>
                    </div>
                    <a class="offers__add" asp-action="AddOffer">
                        Add offer
                    </a>
                </div>
            </div>
            <div class="results-main">
                @foreach (var vehicleOffer in Model)
                {
                    <div class="offer">
                        <div class="offer__upper">
                            @if (user != null && user.Id == vehicleOffer.User?.Id)
                            {
                                <button type="button" class="offer__reservation-status" offer-id="@vehicleOffer.Id" onclick="changeReservation(this,@vehicleOffer.Id)" @(vehicleOffer.IsReserved ? "reserved" : "")>
                                </button>
                            }
                            else
                            {
                                <div class="offer__reservation-status">
                                    Not reserved
                                </div>
                            }
                            <div class="offer__actions-section">
                                @if (user != null && user.Id == vehicleOffer.User?.Id)
                                {
                                    <div class="offer__edit-btn-wrp">
                                        <a class="offer__edit-link" asp-action="EditOffer" asp-route-id="@vehicleOffer.Id">
                                            <img src="~/images/edit-icon.svg" />
                                        </a>
                                    </div>
                                }
                                @if (user != null)
                                {
                                    var offerObservation = offerObservationService.FindByUserAndOffer(user.Id, vehicleOffer.Id);
                                    <button type="button" class="offer__observation-status" user-id="@user.Id" offer-id="@vehicleOffer.Id" @(offerObservation != null ? $"observation-id={offerObservation.Id}" : "")>
                                        <img src="~/images/pin.svg" alt="pin offer" />
                                    </button>
                                }
                            </div>
                        </div>
                        <div class="offer__photo-main">
                            <a class="img-button" asp-action="DetailsOffer" asp-route-id="@vehicleOffer.Id">
                                @if (vehicleOffer.Images != null && vehicleOffer.Images.Count > 0)
                                {
                                    <img src="data:image/@vehicleOffer.Images[0].Extension;base64,@vehicleOffer.Images[0].Base64" alt="fetch failed" />
                                }
                                else
                                {
                                    <img src="~/images/default-car.png" />
                                }
                            </a>
                        </div>
                        <div class="offer__bottom">
                            <div class="offer__brand">
                                @vehicleOffer.Brand
                            </div>
                            <div class="offer__model-price">
                                <div class="offer__model">
                                    @vehicleOffer.Model @vehicleOffer.Version
                                </div>
                                <div class="offer__price">
                                    @vehicleOffer.Price.ToString("N0") PLN
                                    <div class="offer__price-tag">
                                        Gross
                                    </div>
                                </div>
                            </div>
                            <hr class="hr-line" />
                            <div class="offer__location-owner">
                                <div class="offer__location">
                                    <img src="~/images/location.svg" alt="fetch failed" />
                                    @vehicleOffer.Location
                                </div>
                                <a class="offer__owner" asp-action="ProfileView" asp-controller="User" asp-route-id="@vehicleOffer.User.Id">
                                    @vehicleOffer.User.UserName
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </form>
</div>
